1.Perfect Shuffle
Given an array of integers (without any duplicates), shuffle the array such that all permutations are equally likely to be generated.

Assumptions

The given array is not null

public class Solution {
  public void shuffle(int[] array) {
    // Write your solution here.
  }
}


2.Reservoir Sampling
Consider an unlimited flow of data elements. How do you sample one element from this flow, such that at any point during the processing of the flow, you can return a random element from the n elements read so far.

You will implement two methods for a sampling class:

read(int value) - read one number from the flow
sample() - return at any time the sample, if n values have been read, the probability of returning any one of the n values is 1/n, return null(Java)/INT_MIN(C++) if there is no value read so far
You may need to add more fields for the class.

public class Solution {
  public Solution() {
    // Write your constructor code here if necessary.
  }
  
  public void read(int value) {
    // Write your implementation here.
  }
  
  public Integer sample() {
    // Write your implementation here.
    return null;
  }
}


3.Random7 Using Random5
Given a random generator random5(), the return value of random5() is 0 - 4 with equal probability. Use random5() to implement random7().


public class Solution {
  public int random7() {
    // write your solution here
    // you can use RandomFive.random5() for generating
    // 0 - 4 with equal probability.
    return 0;
  }
}


4.Random1000 Using Random5
Given a random generator random5(), the return value of random5() is 0 - 4 with equal probability. Use random5() to implement random1000()

public class Solution {
  public int random1000() {
    // Write your solution here.
    // you can use RandomFive.random5() for generating
    // 0 - 4 with equal probability.
    return 0;
  }
}


5.Median Tracker
Given an unlimited flow of numbers, keep track of the median of all elements seen so far.

You will have to implement the following two methods for the class

read(int value) - read one value from the flow
median() - return the median at any time, return null if there is no value read so far
Examples

read(1), median is 1
read(2), median is 1.5
read(3), median is 2
read(10), median is 2.5
......

public class Solution {
  public Solution() {
    // add new fields and complete the constructor if necessary.
  }
  
  public void read(int value) {
    // write your implementation here.
  }
  
  public Double median() {
    // write your implementation here.
    return null;
  }
}

6.95 Percentile
Given a list of integers representing the lengths of urls, find the 95 percentile of all lengths (95% of the urls have lengths <= returned length).

Assumptions

The maximum length of valid url is 4096

The list is not null and is not empty and does not contain null

Examples

[1, 2, 3, ..., 95, 96, 97, 98, 99, 100], 95 percentile of all lengths is 95.

public class Solution {
  public int percentile95(List<Integer> lengths) {
    // Write your solution here.
    return 0;
  }
}


