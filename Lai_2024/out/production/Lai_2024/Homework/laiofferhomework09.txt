1.Reverse String
Reverse a given string.

Assumptions

The given string is not null.

public class Solution {
  public String reverse(String input) {
    // Write your solution here.
    return input;
  }
}


2.Right Shift By N Characters
Right shift a given string by n characters.

Assumptions

The given string is not null.
n >= 0.

public class Solution {
  public String rightShift(String input, int n) {
    // Write your solution here.
    return input;
  }
}

3.Reverse Words In A Sentence I
Reverse the words in a sentence.

Assumptions

Words are separated by single space

There are no heading or tailing white spaces

Examples

“I love Google” → “Google love I”

Corner Cases

If the given string is null, we do not need to do anything.

public class Solution {
  public String reverseWords(String input) {
    // Write your solution here.
    return "";
  }
}

4.String Replace
Given an original string input, and two strings S and T, replace all occurrences of S in input with T.

Assumptions

input, S and T are not null, S is not empty string
Examples

input = "appledogapple", S = "apple", T = "cat", input becomes "catdogcat"
input = "dodododo", S = "dod", T = "a", input becomes "aoao"

public class Solution {
  public String replace(String input, String s, String t) {
	}
}


5.ReOrder Array
Given an array of elements, reorder it as follows:

{ N1, N2, N3, …, N2k } → { N1, Nk+1, N2, Nk+2, N3, Nk+3, … , Nk, N2k }

{ N1, N2, N3, …, N2k+1 } → { N1, Nk+1, N2, Nk+2, N3, Nk+3, … , Nk, N2k, N2k+1 }

Try to do it in place.

Assumptions

The given array is not null
Examples

{ 1, 2, 3, 4, 5, 6} → { 1, 4, 2, 5, 3, 6 }

{ 1, 2, 3, 4, 5, 6, 7, 8 } → { 1, 5, 2, 6, 3, 7, 4, 8 }

{ 1, 2, 3, 4, 5, 6, 7 } → { 1, 4, 2, 5, 3, 6, 7 }

public class Solution {
  public int[] reorder(int[] array) {
    // Write your solution here.
    return array;
  }
}



6. All Permutations II (String Permutation) - DFS经典
Given a string with possible duplicate characters, return a list with all permutations of the characters.
Examples
* Set = “abc”, all permutations are [“abc”, “acb”, “bac”, “bca”, “cab”, “cba”]
* Set = "aba", all permutations are ["aab", "aba", "baa"]
* Set = "", all permutations are [""]
* Set = null, all permutations are []

public class Solution {
  public List<String> permutations(String set) {
    // Write your solution here.
    return null;
  }
}


7.Decompress String II

Given a string in compressed form, decompress it to the original string. The adjacent repeated characters in the original string are compressed to have the character followed by the number of repeated occurrences.
Assumptions
* The string is not null
* The characters used in the original string are guaranteed to be ‘a’ - ‘z’
* There are no adjacent repeated characters with length > 9
Examples
* “a1c0b2c4” → “abbcccc”



public class Solution {
  public String decompress(String input) {
    // Write your solution here.
    return "";
  }
}




8.Longest Substring Without Repeating Characters
Given a string, find the longest substring without any repeating characters and return the length of it. The input string is guaranteed to be not null.

For example, the longest substring without repeating letters for "bcdfbd" is "bcdf", we should return 4 in this case.


public class Solution {
  public int longest(String input) {
    // Write your solution here.
    return 0;
  }
}



9.All Anagrams
Find all occurrence of anagrams of a given string s in a given string l. Return the list of starting indices.

Assumptions

s is not null or empty.
l is not null.
Examples

l = "abcbac", s = "ab", return [0, 3] since the substring with length 2 starting from index 0/3 are all anagrams of "ab" ("ab", "ba").

public class Solution {
  List<Integer> allAnagrams(String s, String l) {
    // Write your solution here.
    return new ArrayList<Integer>();
  }
}
